// License: Apache 2.0. See LICENSE file in root directory.
// Copyright(c) 2022 Intel Corporation. All Rights Reserved.

/*!
 * @file image.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_REALDDS_TOPICS_RAW_DEVICE_IMAGE_H_
#define _FAST_DDS_GENERATED_REALDDS_TOPICS_RAW_DEVICE_IMAGE_H_


//#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(image_SOURCE)
#define image_DllAPI __declspec( dllexport )
#else
#define image_DllAPI __declspec( dllimport )
#endif // image_SOURCE
#else
#define image_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define image_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace realdds {
    namespace topics {
        namespace raw {
            namespace device {
                /*!
                 * @brief This class represents the structure image defined by the user in the IDL file.
                 * @ingroup IMAGE
                 */
                class image
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport image();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~image();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object realdds::topics::raw::device::image that will be copied.
                     */
                    eProsima_user_DllExport image(
                            const image& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object realdds::topics::raw::device::image that will be copied.
                     */
                    eProsima_user_DllExport image(
                            image&& x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object realdds::topics::raw::device::image that will be copied.
                     */
                    eProsima_user_DllExport image& operator =(
                            const image& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object realdds::topics::raw::device::image that will be copied.
                     */
                    eProsima_user_DllExport image& operator =(
                            image&& x);

                    /*!
                     * @brief Comparison operator.
                     * @param x realdds::topics::raw::device::image object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const image& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x realdds::topics::raw::device::image object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const image& x) const;

                    /*!
                     * @brief This function copies the value in member raw_data
                     * @param _raw_data New value to be copied in member raw_data
                     */
                    eProsima_user_DllExport void raw_data(
                            const std::vector<uint8_t>& _raw_data);

                    /*!
                     * @brief This function moves the value in member raw_data
                     * @param _raw_data New value to be moved in member raw_data
                     */
                    eProsima_user_DllExport void raw_data(
                            std::vector<uint8_t>&& _raw_data);

                    /*!
                     * @brief This function returns a constant reference to member raw_data
                     * @return Constant reference to member raw_data
                     */
                    eProsima_user_DllExport const std::vector<uint8_t>& raw_data() const;

                    /*!
                     * @brief This function returns a reference to member raw_data
                     * @return Reference to member raw_data
                     */
                    eProsima_user_DllExport std::vector<uint8_t>& raw_data();
                    /*!
                     * @brief This function sets a value in member size
                     * @param _size New value for member size
                     */
                    eProsima_user_DllExport void size(
                            uint32_t _size);

                    /*!
                     * @brief This function returns the value of member size
                     * @return Value of member size
                     */
                    eProsima_user_DllExport uint32_t size() const;

                    /*!
                     * @brief This function returns a reference to member size
                     * @return Reference to member size
                     */
                    eProsima_user_DllExport uint32_t& size();

                    /*!
                     * @brief This function sets a value in member width
                     * @param _width New value for member width
                     */
                    eProsima_user_DllExport void width(
                            uint16_t _width);

                    /*!
                     * @brief This function returns the value of member width
                     * @return Value of member width
                     */
                    eProsima_user_DllExport uint16_t width() const;

                    /*!
                     * @brief This function returns a reference to member width
                     * @return Reference to member width
                     */
                    eProsima_user_DllExport uint16_t& width();

                    /*!
                     * @brief This function sets a value in member height
                     * @param _height New value for member height
                     */
                    eProsima_user_DllExport void height(
                            uint16_t _height);

                    /*!
                     * @brief This function returns the value of member height
                     * @return Value of member height
                     */
                    eProsima_user_DllExport uint16_t height() const;

                    /*!
                     * @brief This function returns a reference to member height
                     * @return Reference to member height
                     */
                    eProsima_user_DllExport uint16_t& height();

                    /*!
                     * @brief This function sets a value in member format
                     * @param _format New value for member format
                     */
                    eProsima_user_DllExport void format(
                            uint8_t _format);

                    /*!
                     * @brief This function returns the value of member format
                     * @return Value of member format
                     */
                    eProsima_user_DllExport uint8_t format() const;

                    /*!
                     * @brief This function returns a reference to member format
                     * @return Reference to member format
                     */
                    eProsima_user_DllExport uint8_t& format();


                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                            size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(
                            const realdds::topics::raw::device::image& data,
                            size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(
                            eprosima::fastcdr::Cdr& cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(
                            eprosima::fastcdr::Cdr& cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                            size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(
                            eprosima::fastcdr::Cdr& cdr) const;

                private:

                    std::vector<uint8_t> m_raw_data;
                    uint32_t m_size;
                    uint16_t m_width;
                    uint16_t m_height;
                    uint8_t m_format;
                };
            } // namespace device
        } // namespace raw
    } // namespace topics
} // namespace realdds

#endif // _FAST_DDS_GENERATED_REALDDS_TOPICS_RAW_DEVICE_IMAGE_H_
